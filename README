********************************************************************************
____________  _____  ______                
|  ___| ___ \/  ___| | ___ \               
| |_  | |_/ /\ `--.  | |_/ / __ _ ___  ___ 
|  _| |  __/  `--. \ | ___ \/ _` / __|/ _ \
| |   | |    /\__/ / | |_/ / (_| \__ \  __/
\_|   \_|    \____/  \____/ \__,_|___/\___|
(Text art Source: http://patorjk.com/software/taag/)
********************************************************************************

This is boiler-plate code for an open-world first-person shooter game.
These scripts work with Unity3D editor 5.6.3xf1. Ubuntu link below.
https://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/

Vision: Provide first-person shooter roleplaying gameplay similar to the recent
installments of The Elder Scrolls and Fallout series, albeit with the addition
of couch-multiplayer coop.

Strategy:
An iterative development cycle will occur at each expansion of this project's
scope.

1. Tech Demo phase: Base code for new features will be expanded using
placeholder assets and content.
2. Product phase: Base code will remain largely unchanged, production turning
instead toward assets and content.
3. Product release: A polished product will be sold. Assets and content may or
may not be re-used on next iteration. 

********************************************************************************
______               _                                  _   
|  _  \             | |                                | |  
| | | |_____   _____| | ___  _ __  _ __ ___   ___ _ __ | |_ 
| | | / _ \ \ / / _ \ |/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
| |/ /  __/\ V /  __/ | (_) | |_) | | | | | |  __/ | | | |_ 
|___/ \___| \_/ \___|_|\___/| .__/|_| |_| |_|\___|_| |_|\__|
                            | |                             
                            |_|                             
********************************************************************************

Reoadmap:
0.5.X- Arena gamemode.

Current version: 0.5.4

Backlog
-Rewrite Hotbar
-Refactor EquipSlot
-Cone of fire
-Iron-sights
-Streamline Arena Lobby
-Create Kit class that reads from config file.

Current Objective
-Create class for keyboard/controller input logic.


********************************************************************************
  ___           _     _ _            _                  
 / _ \         | |   (_) |          | |                 
/ /_\ \_ __ ___| |__  _| |_ ___  ___| |_ _   _ _ __ ___ 
|  _  | '__/ __| '_ \| | __/ _ \/ __| __| | | | '__/ _ \
| | | | | | (__| | | | | ||  __/ (__| |_| |_| | | |  __/
\_| |_/_|  \___|_| |_|_|\__\___|\___|\__|\__,_|_|  \___|
                                                        
********************************************************************************

Architectural Overview:

Session.cs- Singleton that routes method calls between classes and contains
global state.

JukeBox.cs- Responsible for loading and playing music from /Resources/Music/

/Arena/Arena.cs- Manages the "Arena" gamemode.

CellSaver.cs- Used to automatically create or update /Resources/world.master
using open Unity scenes.

World.cs- Manages the "Adventure" mode.
  Cell.cs- Contains the Actors and Items of a specific
  Building.cs- A collection of Cells representing rooms in a building.
  HoloDeck.cs- Creates Holocells to load rooms and contiguous overworld.
    HoloCell.cs- Renders the items, Actors of a portion of the world.
  MapRecord.cs- The state of a map with auto-incrementing IDs.
  Cartographer.cs- Offers a static method that procedurally-generates a new map
  using the contents of /Resources/world.master

/Quests/- Quest classes inheriting from Quest.cs
/Menus/- Menu classes ineriting from Menu.cs
  MenuManger.cs- Changes the active Menu, handling constructors and some state. 
/Items/- Item Classes inheriting from Item.cs


/Actor/- Components of Actor.cs class.
  EquipSlot.cs- Manages the equipping and use of Actor's weapon slots.
  PaperDoll.cs- Manages the equipping of the Actor's body with clothes.
  HitBox.cs- Routes attacks to specified destination.
  Inventory.cs- Storage for an Actor's unequipped items. 
  HotBar.cs- Manages quick-switching between weapons in Actor's inventory.
  StatHandler.cs- Handles the roleplaying number-crunching of an Actor. 
  SpeechTree.cs- Handles the dialogue state of an NPC Actor.
    SpeechNode.cs = A single dialogue prompt.
    Option.cs- A single dialogue option.
  
